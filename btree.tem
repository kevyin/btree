#include <algorithm>

template <typename T>
btree<T>::btree(size_t maxNodeElems) : tree_(new bt_(maxNodeElems)) {}

template <typename T>
btree<T>::btree(const btree<T>& original) {
    
}

template <typename T>
std::ostream& operator<<(std::ostream& os, const btree<T>& tree) {
    //for (typename btree<T>::nodes_type::const_iterator it = tree.nodes.begin(); 
         //it != tree.nodes.end(); ++it) {
        //os << *it;
    //}
    return os;
}

template <typename T>
std::pair<typename btree<T>::iterator, bool> btree<T>::insert(const T& elem) {
    //NodePtr new_node(new Node(elem));

    //if (nodeElems() < maxNodeElems) { // no need for branching
        //nodes.insert(new_node);
    //} else { // put the elem in a sub-btree

        //// find pos of subtree
        //nodes_iterator_type pos = nodes.lower_bound(new_node);
        //nodes_iterator_type top_right = pos;
        //nodes_iterator_type top_left = (top_right != nodes.begin()) ? --pos : pos;

        //cout << "INSERTING into new SUB TREE" << endl;
        //// The new sub-btree
        //btreePtr subbt(new btree<T>(maxNodeElems));
        //insert_res_type res = subbt->insert(elem);
        ////cout << "new subtree " << *subtree << endl;


        //// modify the left right pointers in nodes above
        //if (top_right != nodes.end())  
            //(*top_right)->left_ = subbt; // top right node
        
        //if (top_right != nodes.begin())  
            //(*top_left)->right_ = subbt; // top left node
        
        
    //}
}

template <typename T>
btree<T>::~btree() {
    //cout << "~btree" << endl;
    // Nodes will destroy their right branch therefore
    // remember to destroy the first left most branch
    //if (nodeElems() > 0) {
        //btree* leftTree = nodes.begin()->left_;
        //if (leftTree != Const::null) leftTree->~btree();
    //}
}

template <typename T>
size_t btree<T>::nodeElems() {
    return tree_->nodeElems();
}                                                                           
