#include <algorithm>
#include <string>
#include <vector>
#include <sstream>

template <typename T>
btree<T>::btree(size_t maxNodeElems) : btree_(new BTree(maxNodeElems)), maxNodeElems_(maxNodeElems) {}

template <typename T>
btree<T>::btree(const btree<T>& original) {
    
}

template <typename T>
std::ostream& operator<<(std::ostream& os, const btree<T>& btree) {
    vector<string> strings;
    btree.btree_->outputBF(strings, 1);

    std::ostream_iterator< string > output( cout, " " );
    copy(strings.begin(), strings.end(), output);
    //os << *btree.btree_;
    return os;
}

template <typename T>
typename btree<T>::iterator btree<T>::find(const T& elem) {
    return iterator(btree_->find(elem));
}

template <typename T>
typename btree<T>::insert_res_type btree<T>::insert(const T& elem) {
    return btree_->insert(elem);
}

template <typename T>
btree<T>::~btree() {
    // Clear the branches so that btree_ is the only BTreePtr left to the tree
    btree_->recurClear();

}
// Node functions

template <typename T>
typename btree<T>::Node* btree<T>::Node::findNextUp() {
    // look in owner nodes
    typename btree<T>::BTree::nodes_type& nodes = owner_->nodes_;

    typename btree<T>::NodePtr tmpNode(this);
    typename btree<T>::BTree::nodes_iterator_type next_node = nodes.upper_bound(tmpNode);

    if (next_node != nodes.end()) { // is there a next node
        if ((*next_node)->left_.isNull()) { // if there is no tree on the left
            return next_node->n_;
        } else { 
            // there is a tree on the left, return head()
            return (*next_node)->left_->head();
        }
    } else { // otherwise go up again
        if (!owner_->top_right_.isNull()) {
            return owner_->top_right_.n_;
        } else {
            return Const::null;
        }
    }
}

// BTree functions

template <typename T>
typename btree<T>::insert_res_type btree<T>::BTree::insert(const T& elem) {
    //cout << "BTREE::INSERT " << elem << endl;
    NodePtr new_node(new Node(elem));
    if (nodeElems() < maxNodeElems_) { // no need for branching
        new_node->owner_ = BTreePtr(this);
        pair< typename btree<T>::BTree::nodes_type::iterator, bool> res = nodes_.insert(new_node);

        return btree<T>::insert_res_type(btree_iterator<T>(new_node.n_), res.second);
    } else { // put the elem in a sub-btree
        // find pos of subtree to insert
        nodes_iterator_type pos = nodes_.lower_bound(new_node);
        nodes_iterator_type top_right = pos;
        nodes_iterator_type top_left = (top_right != nodes_.begin()) ? --pos : pos;

        if ((top_right != nodes_.end() && (*top_right)->left_.isNull()) ||
            (top_right == nodes_.end() && (*top_left)->right_.isNull())) { 
            // The new sub-btree
            BTreePtr subbt(new BTree(maxNodeElems_));
            insert_res_type res = subbt->insert(elem);

            // modify the left right pointers in nodes above
            if (top_right != nodes_.end()) {
                (*top_right)->left_ = subbt; // top right node
                subbt->top_right_ = *top_right;
            }
            
            if (top_right != nodes_.begin()) {
                (*top_left)->right_ = subbt; // top left node
                subbt->top_left_ = *top_left;
            }
            return res;
        } else if (top_right != nodes_.end()) { 
            // put in already existing subtree
            return (*top_right)->left_->insert(elem);
        } else {
            // put in already existing subtree
            return (*top_left)->right_->insert(elem);
        }
    }
}

template <typename T>
typename btree<T>::Node* btree<T>::BTree::head() const {
    typename btree<T>::Node& firstNode = **nodes_.begin();
    if (firstNode.left_.isNull()) {
        return &firstNode;
    } else {
        return firstNode.left_->head();
    }
    
}

template <typename T>
void btree<T>::BTree::outputBF(vector<string>& strs, size_t level) const {
    // Add the nodes at this level
    ostringstream oss(ostringstream::in);
    for (nodes_iterator_type it = nodes_.begin(); it != nodes_.end(); ++it) {
        if (it != nodes_.begin())
            oss << ' ';
        oss << *it;        
    }

    if (strs.size() < level)
        strs.push_back(oss.str());
    else 
        strs.at(level - 1) += ' ' + oss.str();
    
    // Add nodes to lower levels
    if (!(*nodes_.begin())->left_.isNull()) {
        (*nodes_.begin())->left_->outputBF(strs, level + 1);
    }
    for (nodes_iterator_type it = nodes_.begin(); it != nodes_.end(); ++it) {
        if (!(*it)->right_.isNull()) {
            (*it)->right_->outputBF(strs, level + 1);
        }
    }
}

