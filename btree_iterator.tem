
#include <cassert>

template <typename T>
typename btree_iterator<T>::reference btree_iterator<T>::operator*() const {
    return pointee_->elem_;
}

template <typename T>
btree_iterator<T>& btree_iterator<T>::operator++() {
    assert(!pointee_.isNull());
    if (!pointee_->right_.isNull()) { // check subtee on right

    } else { // got up a level and get node from there
   
    }

    return *this;
}

template <typename T>
bool btree_iterator<T>::operator==(const btree_iterator<T>& other) const {
    return this->pointee_ == other.pointee_;
}
